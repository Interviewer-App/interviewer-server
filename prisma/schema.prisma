generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model User {
//   id            String     @id @default(cuid())
//   email         String     @unique
//   password      String
//   name          String
//   role          Role       @default(CLIENT)
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
//   emailVerified DateTime?
//   image         String?
//   Admin         Admin?
//   Candidate     Candidate?
// }

// model Profile {
//   id          String    @id @default(cuid())
//   candidateId String    @unique
//   bio         String?
//   resume      String?
//   Candidate   Candidate @relation(fields: [candidateId], references: [id])
// }

// model Company {
//   id      String @id @default(cuid())
//   name    String
//   adminId String @unique
//   Admin   Admin  @relation(fields: [adminId], references: [id])
//   Job     Job[]
// }

// model Admin {
//   id      String   @id
//   userId  String   @unique
//   User    User     @relation(fields: [userId], references: [id])
//   Company Company?
// }

// model AppliedJob {
//   id          String            @id
//   candidateId String
//   jobId       String
//   status      ApplicationStatus
//   Candidate   Candidate         @relation(fields: [candidateId], references: [id])
//   Job         Job               @relation(fields: [jobId], references: [id])
// }

// model Candidate {
//   id         String       @id
//   userId     String       @unique
//   AppliedJob AppliedJob[]
//   User       User         @relation(fields: [userId], references: [id])
//   Profile    Profile?
//   Skill      Skill[]
// }

// model Job {
//   id          String       @id
//   title       String
//   description String
//   companyId   String
//   AppliedJob  AppliedJob[]
//   Company     Company      @relation(fields: [companyId], references: [id])
// }

// model Skill {
//   id          String     @id
//   candidateId String
//   name        String
//   level       SkillLevel
//   Candidate   Candidate  @relation(fields: [candidateId], references: [id])
// }

// enum Role {
//   ADMIN
//   CLIENT
// }

// enum SkillLevel {
//   BEGINNER
//   INTERMEDIATE
//   EXPERT
// }

// enum ApplicationStatus {
//   APPLIED
//   INTERVIEW
//   REJECTED
//   HIRED
// }

//old schema
// enum Role {
//   ADMIN
//   CANDIDATE
//   COMPANY
// }

// enum SubscriptionTier {
//   FREE
//   BASIC
//   PROFESSIONAL
//   ENTERPRISE
// }

enum InterviewStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

// model User {
//   id               String             @id @default(cuid())
//   email            String             @unique
//   password         String
//   role             Role               @default(CANDIDATE)
//   profile          Profile?
//   company          Company?
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @updatedAt
//   InterviewSession InterviewSession[]
// }

// model Profile {
//   id        String   @id @default(cuid())
//   userId    String   @unique
//   user      User     @relation(fields: [userId], references: [id])
//   firstName String
//   lastName  String
//   skills    String[]
//   resumeUrl String?
// }
//
// model Company {
//   id           String        @id @default(cuid())
//   userId       String        @unique
//   user         User          @relation(fields: [userId], references: [id])
//   name         String
//   description  String?
//   interviews   Interview[]
//   subscription Subscription?
// }

// model Subscription {
//   id        String           @id @default(cuid())
//   companyId String           @unique
//   company   Company          @relation(fields: [companyId], references: [id])
//   tier      SubscriptionTier @default(FREE)
//   startDate DateTime         @default(now())
//   endDate   DateTime
//   isActive  Boolean          @default(true)
// }

enum Role {
  CANDIDATE
  ADMIN
  INTERVIEWER
  COMPANY
}

enum CandidateStatus {
  OFFERED
  REJECTED
  APPLIED
  INTERVIEWSCHEDULED
}

enum InterviewFormat {
  TECHNICAL
  BEHAVIORAL
}

model User {
  userID            String       @id @default(cuid())
  firstName         String?
  lastName          String?
  username          String?
  dob               DateTime?    @default(now())
  gender            String?
  contactNo         String?
  email             String       @unique
  password          String?
  provider          String?
  providerAccountId String?
  role              Role         @default(CANDIDATE)
  admin             Admin?
  candidate         Candidate?
  company           Company?
  interviewer       Interviewer?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Candidate {
  profileID       String          @id @default(cuid())
  userID          String          @unique
  user            User            @relation(fields: [userID], references: [userID])
  skillHighlights String
  experience      String
  availability    String
  status          CandidateStatus @default(APPLIED)
  resumeURL       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  sessions           InterviewSession[]
  interviews         CandidateOnInterviews[]
  interviewResponses Answer[]
  userServey         CandidateServey[]
  invitations CandidateInvitation[]
  Scheduling Scheduling[]
}

model CandidateServey {
  serveyId    String    @id @default(cuid())
  question    String
  answer      String[]
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [profileID])
}

model Admin {
  adminID    String   @id @default(cuid())
  userID     String   @unique
  user       User     @relation(fields: [userID], references: [userID])
  // companyID  Int
  // company    Company  @relation(fields: [companyID], references: [companyID])
  permitions String
  logs       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Interviewer {
  interviewerID           String                    @id @default(cuid())
  userID                  String                    @unique
  user                    User                      @relation(fields: [userID], references: [userID])
  companyID               String
  company                 Company                   @relation(fields: [companyID], references: [companyID])
  interviewFormat         InterviewFormat           @default(TECHNICAL)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  InterviewerOnInterviews InterviewerOnInterviews[]
}

model Company {
  companyID          String          @id @default(cuid())
  userID             String          @unique
  companyName        String
  companyDescription String?
  websiteURL         String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  user               User            @relation(fields: [userID], references: [userID])
  interviewer        Interviewer[]
  interviews         Interview[]
  Category           Category[]
  companySurvey      CompanyServey[]
}

model CompanyServey {
  serveyId  String   @id @default(cuid())
  question  String
  answer    String[]
  companyId String
  company   Company  @relation(fields: [companyId], references: [companyID])
}

// model Interview {
//   id          String             @id @default(cuid())
//   companyId   String
//   company     Company            @relation(fields: [companyId], references: [companyID])
//   title       String
//   description String?
//   questions   Json
//   duration    Int // in minutes
//   status      InterviewStatus    @default(DRAFT)
//   sessions    InterviewSession[]
//   createdAt   DateTime           @default(now())
//   updatedAt   DateTime           @updatedAt
//   Question    Question[]
// }

model Interview {
  interviewID       String            @id @default(cuid())
  interviewCategory interviewCategory
  jobTitle          String
  jobDescription    String?
  requiredSkills    String?
  companyID         String
  startDate         DateTime
  endDate           DateTime
  status            status
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  company            Company                   @relation(fields: [companyID], references: [companyID])
  interviewSessions  InterviewSession[]
  interviewers       InterviewerOnInterviews[]
  candidates         CandidateOnInterviews[]
  CategoryAssignment CategoryAssignment[]
  scheduling         Scheduling[]
  invitations CandidateInvitation[]
}

model InterviewerOnInterviews {
  interviewer   Interviewer @relation(fields: [interviewerId], references: [interviewerID])
  interviewerId String
  interview     Interview   @relation(fields: [interviewId], references: [interviewID])
  interviewId   String
  // assignedAt DateTime @default(now())
  // assignedBy String

  @@id([interviewerId, interviewId])
}

model CandidateOnInterviews {
  candidate   Candidate @relation(fields: [candidateId], references: [profileID])
  candidateId String
  interview   Interview @relation(fields: [interviewId], references: [interviewID])
  interviewId String
  // assignedAt  DateTime   @default(now())
  // assignedBy  String

  @@id([candidateId, interviewId])
}

enum status {
  PENDING
  COMPLETED
  ARCHIVED
  ACTIVE
  DRAFT
}

// model InterviewSession {
//   id          String    @id @default(cuid())
//   interviewId String
//   interview   Interview @relation(fields: [interviewId], references: [id])
//   candidateId String
//   candidate   Candidate @relation(fields: [candidateId], references: [userID])
//   responses   Json?
//   status      String    @default("PENDING")
//   startTime   DateTime?
//   endTime     DateTime?
//   score       Float?
//   aiAnalysis  Json?
// }

model InterviewSession {
  sessionId          String            @id @default(cuid())
  candidateId        String
  candidate          Candidate         @relation(fields: [candidateId], references: [profileID])
  assesmentId        String?
  feedbackId         String?
  interviewCategory  interviewCategory
  interviewId        String
  interview          Interview         @relation(fields: [interviewId], references: [interviewID])
  scheduledDate      DateTime
  scheduledAt        DateTime
  completedDate      DateTime?
  interviewStatus    interviewStatus
  score              Float?            @default(0)
  timeConsumed       Int?              @default(0)
  reviewedBy         String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  scheduling         Scheduling?
  questions          Question[]
  interviewResponses Answer[]
  CategoryScore      CategoryScore[]

  // interviewFeedback  InterviewFeedback[]
  @@unique([interviewId, candidateId])
}

model Scheduling {
  scheduleID                String   @id @default(cuid())
  interviewId               String
  candidateId               String?
  sessionID                 String?  @unique
  startTime                 DateTime
  endTime                   DateTime
  reminderSentToInterviewer Boolean?
  reminderSentToCandidate   Boolean?
  isBooked                  Boolean  @default(false)
  notificationStatus        String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  interviewSession InterviewSession? @relation(fields: [sessionID], references: [sessionId])
  interview        Interview         @relation(fields: [interviewId], references: [interviewID])
  candidate        Candidate?        @relation(fields: [candidateId], references: [profileID])

  @@unique([interviewId, candidateId])
}

enum interviewCategory {
  Technical
  Behavioural
}

enum interviewStatus {
  toBeConducted
  completed
}

// model Question {
//   id          String       @id @default(cuid())
//   interviewId String
//   interview   Interview    @relation(fields: [interviewId], references: [id], onDelete: Cascade)
//   question    String
//   type        QuestionType
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
// }
model Question {
  questionID           String           @id @default(cuid())
  sessionID            String
  questionCategory     String?
  questionText         String
  explanation          String?
  estimatedTimeMinutes Int              @default(0)
  aiContext            String?
  diffcultyLevel       String?
  type                 QuestionType
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  usageFrequency       Int?
  interviewSession     InterviewSession @relation(fields: [sessionID], references: [sessionId])
  interviewResponses   Answer?
}

enum QuestionType {
  OPEN_ENDED
  CODING
}

model score {
  scoreID    String    @id @default(cuid())
  responseId String    @unique
  // candidateID String @unique
  score      Float
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  answers Answer @relation(fields: [responseId], references: [responseID])
  // candidate Candidate        @relation(fields: [candidateID], references: [profileID])
}

//new schema
model Answer {
  responseID        String           @id @default(cuid())
  sessionID         String
  questionID        String           @unique
  candidateID       String
  responseText      String
  score             score?
  responseTime      DateTime
  languageDetected  String
  sentimentAnalysis String?
  keywordExtracted  String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  comparisonID      String?
  assessmentID      String?
  reviewID          String?
  // interviewFeedback        InterviewResponseFeedback[]
  question          Question         @relation(fields: [questionID], references: [questionID])
  interviewSession  InterviewSession @relation(fields: [sessionID], references: [sessionId])
  candidateProfiles Candidate        @relation(fields: [candidateID], references: [profileID])
  // interviewMultimediaTable InterviewMultimediaTable[]
  // candidatecomparison      CandidateComparison         @relation(fields: [comparisonID], references: [comparisonID])
  // skillassessments         SkillAssessment             @relation(fields: [assessmentID], references: [assessmentID])
  // reviewHistory            ReviewHistory               @relation(fields: [reviewID], references: [reviewID])
}

model Category {
  categoryId   String   @id @default(cuid())
  companyId    String
  categoryName String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company            Company              @relation(fields: [companyId], references: [companyID])
  CategoryAssignment CategoryAssignment[]
}

model CategoryAssignment {
  assignmentId String   @id @default(cuid())
  interviewId  String
  categoryId   String
  percentage   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  interview     Interview       @relation(fields: [interviewId], references: [interviewID])
  category      Category        @relation(fields: [categoryId], references: [categoryId])
  CategoryScore CategoryScore[]

  @@unique([interviewId, categoryId])
}

model CategoryScore {
  categoryScoreId String   @id @default(cuid())
  sessionId       String
  assignmentId    String
  score           Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  interviewSession   InterviewSession   @relation(fields: [sessionId], references: [sessionId])
  categoryAssignment CategoryAssignment @relation(fields: [assignmentId], references: [assignmentId])

  @@unique([sessionId, assignmentId])
}

model CandidateInvitation {
  invitationID   String    @id @default(cuid())
  candidateID    String
  interviewID    String
  status         InvitationStatus @default(PENDING)
  sentAt         DateTime  @default(now())
  message        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  candidate  Candidate  @relation(fields: [candidateID], references: [profileID])
  interview  Interview  @relation(fields: [interviewID], references: [interviewID])

  @@unique([candidateID, interviewID])
}