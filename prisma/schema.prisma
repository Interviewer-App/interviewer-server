generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id            String     @id @default(cuid())
//   email         String     @unique
//   password      String
//   name          String
//   role          Role       @default(CLIENT)
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
//   emailVerified DateTime?
//   image         String?
//   Admin         Admin?
//   Candidate     Candidate?
// }

// model Profile {
//   id          String    @id @default(cuid())
//   candidateId String    @unique
//   bio         String?
//   resume      String?
//   Candidate   Candidate @relation(fields: [candidateId], references: [id])
// }

// model Company {
//   id      String @id @default(cuid())
//   name    String
//   adminId String @unique
//   Admin   Admin  @relation(fields: [adminId], references: [id])
//   Job     Job[]
// }

// model Admin {
//   id      String   @id
//   userId  String   @unique
//   User    User     @relation(fields: [userId], references: [id])
//   Company Company?
// }

// model AppliedJob {
//   id          String            @id
//   candidateId String
//   jobId       String
//   status      ApplicationStatus
//   Candidate   Candidate         @relation(fields: [candidateId], references: [id])
//   Job         Job               @relation(fields: [jobId], references: [id])
// }

// model Candidate {
//   id         String       @id
//   userId     String       @unique
//   AppliedJob AppliedJob[]
//   User       User         @relation(fields: [userId], references: [id])
//   Profile    Profile?
//   Skill      Skill[]
// }

// model Job {
//   id          String       @id
//   title       String
//   description String
//   companyId   String
//   AppliedJob  AppliedJob[]
//   Company     Company      @relation(fields: [companyId], references: [id])
// }

// model Skill {
//   id          String     @id
//   candidateId String
//   name        String
//   level       SkillLevel
//   Candidate   Candidate  @relation(fields: [candidateId], references: [id])
// }

// enum Role {
//   ADMIN
//   CLIENT
// }

// enum SkillLevel {
//   BEGINNER
//   INTERMEDIATE
//   EXPERT
// }

// enum ApplicationStatus {
//   APPLIED
//   INTERVIEW
//   REJECTED
//   HIRED
// }

//old schema
// enum Role {
//   ADMIN
//   CANDIDATE
//   COMPANY
// }

// enum SubscriptionTier {
//   FREE
//   BASIC
//   PROFESSIONAL
//   ENTERPRISE
// }

enum InterviewStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

// model User {
//   id               String             @id @default(cuid())
//   email            String             @unique
//   password         String
//   role             Role               @default(CANDIDATE)
//   profile          Profile?
//   company          Company?
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @updatedAt
//   InterviewSession InterviewSession[]
// }

// model Profile {
//   id        String   @id @default(cuid())
//   userId    String   @unique
//   user      User     @relation(fields: [userId], references: [id])
//   firstName String
//   lastName  String
//   skills    String[]
//   resumeUrl String?
// }
//
// model Company {
//   id           String        @id @default(cuid())
//   userId       String        @unique
//   user         User          @relation(fields: [userId], references: [id])
//   name         String
//   description  String?
//   interviews   Interview[]
//   subscription Subscription?
// }

// model Subscription {
//   id        String           @id @default(cuid())
//   companyId String           @unique
//   company   Company          @relation(fields: [companyId], references: [id])
//   tier      SubscriptionTier @default(FREE)
//   startDate DateTime         @default(now())
//   endDate   DateTime
//   isActive  Boolean          @default(true)
// }

enum Role {
  CANDIDATE
  ADMIN
  INTERVIEWER
  COMPANY
}

enum CandidateStatus {
  OFFERED
  REJECTED
  APPLIED
  INTERVIEWSCHEDULED
}

enum InterviewFormat {
  TECHNICAL
  BEHAVIORAL
}

model User {
  userID            String     @id @default(cuid())
  firstName         String?
  lastName          String?
  username          String?
  dob               DateTime?    @default(now())
  gender            String?
  contactNo         String?
  email             String       @unique
  password          String?
  provider          String?
  providerAccountId String?
  role              Role         @default(CANDIDATE)
  admin             Admin?
  candidate         Candidate?
  company           Company?
  interviewer       Interviewer?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Candidate {
  profileID       String          @id @default(cuid())
  userID          String           @unique
  user            User            @relation(fields: [userID], references: [userID])
  skillHighlights String
  experience      String
  availability    String
  status          CandidateStatus @default(APPLIED)
  resumeURL       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  sessions InterviewSession[]
}

model Admin {
  adminID    String     @id @default(cuid())
  userID     String      @unique
  user       User     @relation(fields: [userID], references: [userID])
  // companyID  Int
  // company    Company  @relation(fields: [companyID], references: [companyID])
  permitions String
  logs       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Interviewer {
  interviewerID   String     @id @default(cuid())
  userID          String             @unique
  user            User            @relation(fields: [userID], references: [userID])
  companyID       String
  company         Company         @relation(fields: [companyID], references: [companyID])
  interviewFormat InterviewFormat @default(TECHNICAL)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Company {
  companyID          String     @id @default(cuid())
  userID             String           @unique
  companyName        String
  companyDescription String?
  websiteURL         String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userID], references: [userID])
  interviewer        Interviewer[]
  interviews         Interview[]
}

model Interview {
  id          String             @id @default(cuid())
  companyId   String
  company     Company            @relation(fields: [companyId], references: [companyID])
  title       String
  description String?
  questions   Json
  duration    Int // in minutes
  status      InterviewStatus    @default(DRAFT)
  sessions    InterviewSession[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Question    Question[]
}

model InterviewSession {
  id          String    @id @default(cuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id])
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [userID])
  responses   Json?
  status      String    @default("PENDING")
  startTime   DateTime?
  endTime     DateTime?
  score       Float?
  aiAnalysis  Json?
}

model Question {
  id          String       @id @default(cuid())
  interviewId String
  interview   Interview    @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  question    String
  type        QuestionType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum QuestionType {
  OPEN_ENDED
  CODING
}

//new schema
