enum Role {
  CANDIDATE
  ADMIN
  INTERVIEWER
  COMPANY
}

enum CandidateStatus {
  OFFERED
  REJECTED
  APPLIED
  INTERVIEWSCHEDULED
}

enum InterviewFormat {
  TECHNICAL
  BEHAVIORAL
}

model User {
  userID      String       @id @default(cuid())
  firstName   String?
  lastName    String?
  username    String       @unique
  dob         DateTime?    @default(now())
  gender      String?
  contactNo   String
  email       String       @unique
  password    String
  role        Role         @default(CANDIDATE)
  admin       Admin?
  candidate   Candidate?
  company     Company?
  interviewer Interviewer?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Candidate {
  profileID       String          @id @default(cuid())
  userID          String          @unique
  user            User            @relation(fields: [userID], references: [userID])
  skillHighlights String
  experience      String
  availability    String
  status          CandidateStatus @default(APPLIED)
  resumeURL       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  interviews            CandidateOnInterviews[]
  sessions              InterviewSession[]
  interviewResponses    InterviewResponses[]
  candidateOnComparison ComparisonOnCandidate[]
  score                 score?
}

model Admin {
  adminID    String   @id @default(cuid())
  userID     String   @unique
  user       User     @relation(fields: [userID], references: [userID])
  // companyID  Int
  // company    Company  @relation(fields: [companyID], references: [companyID])
  permitions String
  logs       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Interviewer {
  interviewerID       String                    @id @default(cuid())
  userID              String                    @unique
  user                User                      @relation(fields: [userID], references: [userID])
  companyID           String
  company             Company                   @relation(fields: [companyID], references: [companyID])
  interviewFormat     InterviewFormat           @default(TECHNICAL)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  interviews          InterviewerOnInterviews[]
  interviewerFeedback InterviewerOnFeedback[]
  skillAssesment      SkillAssessment[]
}

model Company {
  companyID          String        @id @default(cuid())
  userID             String        @unique
  companyName        String
  companyDescription String?
  websiteURL         String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userID], references: [userID])
  interviewer        Interviewer[]
  interviews         Interviews[]
}

model Interviews {
  interviewID    String   @id @default(cuid())
  jobDescription String
  requiredSkills String
  companyID      String
  // interviewerID  Int
  scheduledDate  DateTime
  scheduledAt    DateTime
  status         status
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  company           Company                   @relation(fields: [companyID], references: [companyID])
  interviewSessions InterviewSession[]
  interviewers      InterviewerOnInterviews[]
  candidates        CandidateOnInterviews[]
}

model InterviewerOnInterviews {
  interviewer   Interviewer @relation(fields: [interviewerId], references: [interviewerID])
  interviewerId String
  interview     Interviews  @relation(fields: [interviewId], references: [interviewID])
  interviewId   String
  // assignedAt DateTime @default(now())
  // assignedBy String

  @@id([interviewerId, interviewId])
}

model CandidateOnInterviews {
  candidate   Candidate  @relation(fields: [candidateId], references: [profileID])
  candidateId String
  interview   Interviews @relation(fields: [interviewId], references: [interviewID])
  interviewId String
  // assignedAt  DateTime   @default(now())
  // assignedBy  String

  @@id([candidateId, interviewId])
}

enum status {
  PENDING
  COMPLETED
}

model InterviewSession {
  sessionId          String               @id @default(cuid())
  candidateId        String
  candidate          Candidate            @relation(fields: [candidateId], references: [profileID])
  assesmentId        Int
  feedbackId         Int
  interviewCategory  interviewCategory
  interviewId        String
  interview          Interviews           @relation(fields: [interviewId], references: [interviewID])
  scheduledDate      DateTime
  scheduledAt        DateTime
  completedDate      DateTime
  interviewStatus    interviewStatus
  score              score?
  reviewedBy         String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  scheduling         Scheduling?
  questions          Question[]
  interviewResponses InterviewResponses[]
  interviewFeedback  InterviewFeedback[]
}

model Scheduling {
  scheduleID                String   @id @default(cuid())
  sessionID                 String   @unique
  date                      DateTime
  time                      DateTime
  reminderSentToInterviewer Boolean
  reminderSentToCandidate   Boolean
  notificationStatus        String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  interviewSession InterviewSession @relation(fields: [sessionID], references: [sessionId])
}

enum interviewCategory {
  Technical
  Behavioural
}

enum interviewStatus {
  toBeConducted
  completed
}

model SkillAssessment {
  assessmentID       String               @id @default(cuid())
  interviewerID      String
  interviewer        Interviewer          @relation(fields: [interviewerID], references: [interviewerID])
  candidateID        Int
  // candidate   Candidate  @relation(fields: [candidateID], references: [candidateID])
  interviewID        Int
  // interview   Interview  @relation(fields: [interviewID], references: [interviewID])
  skillName          String
  skillScore         String
  skillMeterStatus   String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  interviewResponses InterviewResponses[]
}

model CandidateComparison {
  comparisonID          String                  @id @default(cuid())
  interviewID           String
  // interview   Interview  @relation(fields: [interviewID], references: [interviewID])
  interviewerID         String
  // interviewer Interviewer @relation(fields: [interviewerID], references: [interviewerID])
  candidateID           String
  // candidate   Candidate  @relation(fields: [candidateID], references: [candidateID])
  candidateID1          Int
  candidateID2          Int
  comparisonResult      String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  interviewResponses    InterviewResponses[]
  // score Score[]
  candidateOnComparison ComparisonOnCandidate[]
}

model ComparisonOnCandidate {
  candidateId         String
  comparisonId        String
  candidate           Candidate           @relation(fields: [candidateId], references: [profileID])
  candidateComparison CandidateComparison @relation(fields: [comparisonId], references: [comparisonID])

  @@id([candidateId, comparisonId])
}

model Question {
  questionID         String               @id @default(cuid())
  sessionID          String
  questionCategory   String
  questionText       String
  aiContext          String
  diffcultyLevel     String
  type               String
  createdAt          DateTime
  updatedAt          DateTime
  usageFrequency     Int
  interviewSession   InterviewSession     @relation(fields: [sessionID], references: [sessionId])
  interviewResponses InterviewResponses[]
}

model ReviewHistory {
  reviewID           String               @id @default(cuid())
  interviewID        String
  interviewerID      String
  reviewComments     String
  cretaedAt          DateTime
  updatedAt          DateTime
  interviewResponses InterviewResponses[]
}

model InterviewResponses {
  responseID               String                      @id @default(cuid())
  sessionID                String
  questionID               String
  candidateID              String
  responseText             String
  responseTime             DateTime
  languageDetected         String
  sentimentAnalysis        String
  keywordExtracted         String
  createdAt                DateTime
  updatedAt                DateTime
  comparisonID             String
  assessmentID             String
  reviewID                 String
  interviewFeedback        InterviewResponseFeedback[]
  question                 Question                    @relation(fields: [questionID], references: [questionID])
  interviewSession         InterviewSession            @relation(fields: [sessionID], references: [sessionId])
  candidateProfiles        Candidate                   @relation(fields: [candidateID], references: [profileID])
  interviewMultimediaTable InterviewMultimediaTable[]
  candidatecomparison      CandidateComparison         @relation(fields: [comparisonID], references: [comparisonID])
  skillassessments         SkillAssessment             @relation(fields: [assessmentID], references: [assessmentID])
  reviewHistory            ReviewHistory               @relation(fields: [reviewID], references: [reviewID])
}

model InterviewFeedback {
  feedbackID          String                      @id @default(cuid())
  interviewID         String
  interviewerID       String
  sessionId           String
  interviewSesssion   InterviewSession            @relation(fields: [sessionId], references: [sessionId])
  skillScore          String
  skillMeterStatus    String
  createdAt           DateTime
  updatedAt           DateTime
  InterviewResponses  InterviewResponseFeedback[]
  interviewerFeedback InterviewerOnFeedback[]
}

model InterviewerOnFeedback {
  feedbackID        String
  interviewerID     String
  interviewFeedback InterviewFeedback @relation(fields: [feedbackID], references: [feedbackID])
  interviewer       Interviewer       @relation(fields: [interviewerID], references: [interviewerID])

  @@id([feedbackID, interviewerID])
}

model InterviewResponseFeedback {
  feedbackID         String
  responseID         String
  interviewFeedback  InterviewFeedback  @relation(fields: [feedbackID], references: [feedbackID])
  interviewResponses InterviewResponses @relation(fields: [responseID], references: [responseID])

  @@id([feedbackID, responseID])
}

model score {
  scoreID     String @id @default(cuid())
  sessionID   String @unique
  candidateID String @unique
  score       String
  createdAt   String
  updatedAt   String

  session   InterviewSession @relation(fields: [sessionID], references: [sessionId])
  candidate Candidate        @relation(fields: [candidateID], references: [profileID])
}

model InterviewMultimediaTable {
  multimediaId       String             @id @default(cuid())
  responseID         String
  voiceRecordingURL  String
  videoRecordingURL  String
  textToSpeechOutput String
  createdAt          DateTime
  updatedAt          DateTime
  interviewResponses InterviewResponses @relation(fields: [responseID], references: [responseID])
}
